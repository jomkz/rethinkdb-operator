//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/rtfkt-ltd/rethinkdb-operator/pkg/apis/rethinkdb/v1alpha1.RethinkDBCluster":       schema_pkg_apis_rethinkdb_v1alpha1_RethinkDBCluster(ref),
		"github.com/rtfkt-ltd/rethinkdb-operator/pkg/apis/rethinkdb/v1alpha1.RethinkDBClusterSpec":   schema_pkg_apis_rethinkdb_v1alpha1_RethinkDBClusterSpec(ref),
		"github.com/rtfkt-ltd/rethinkdb-operator/pkg/apis/rethinkdb/v1alpha1.RethinkDBClusterStatus": schema_pkg_apis_rethinkdb_v1alpha1_RethinkDBClusterStatus(ref),
		"github.com/rtfkt-ltd/rethinkdb-operator/pkg/apis/rethinkdb/v1alpha1.RethinkDBPodPolicy":     schema_pkg_apis_rethinkdb_v1alpha1_RethinkDBPodPolicy(ref),
	}
}

func schema_pkg_apis_rethinkdb_v1alpha1_RethinkDBCluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RethinkDBCluster is the Schema for the rethinkdbclusters API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/rtfkt-ltd/rethinkdb-operator/pkg/apis/rethinkdb/v1alpha1.RethinkDBClusterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/rtfkt-ltd/rethinkdb-operator/pkg/apis/rethinkdb/v1alpha1.RethinkDBClusterStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/rtfkt-ltd/rethinkdb-operator/pkg/apis/rethinkdb/v1alpha1.RethinkDBClusterSpec", "github.com/rtfkt-ltd/rethinkdb-operator/pkg/apis/rethinkdb/v1alpha1.RethinkDBClusterStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_rethinkdb_v1alpha1_RethinkDBClusterSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RethinkDBClusterSpec defines the desired state of RethinkDBCluster",
				Properties: map[string]spec.Schema{
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size is the number of Pods to create for the RethinkDB cluster. Default: 1",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the RethinkDB version to use for the cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"webAdminEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "WebAdminEnabled indicates whether or not the Web Admin will be enabled for the cluster.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"pod": {
						SchemaProps: spec.SchemaProps{
							Description: "Pod defines the policy for pods owned by rethinkdb operator. This field cannot be updated once the CR is created.",
							Ref:         ref("github.com/rtfkt-ltd/rethinkdb-operator/pkg/apis/rethinkdb/v1alpha1.RethinkDBPodPolicy"),
						},
					},
				},
				Required: []string{"size"},
			},
		},
		Dependencies: []string{
			"github.com/rtfkt-ltd/rethinkdb-operator/pkg/apis/rethinkdb/v1alpha1.RethinkDBPodPolicy"},
	}
}

func schema_pkg_apis_rethinkdb_v1alpha1_RethinkDBClusterStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RethinkDBClusterStatus defines the observed state of RethinkDBCluster",
				Properties: map[string]spec.Schema{
					"servers": {
						SchemaProps: spec.SchemaProps{
							Description: "Servers is a list of the names of the rethinkdb server Pods in the cluster.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"serviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceName is the name of the Service for accessing the RethinkDB cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_rethinkdb_v1alpha1_RethinkDBPodPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RethinkDBPodPolicy defines the policy for pods owned by rethinkdb operator.",
				Properties: map[string]spec.Schema{
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources is the resource requirements for the containers.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"persistentVolumeClaimSpec": {
						SchemaProps: spec.SchemaProps{
							Description: "PersistentVolumeClaimSpec is the spec to describe PVC for the rethinkdb container This field is optional. If no PVC spec, rethinkdb container will use emptyDir as volume",
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PersistentVolumeClaimSpec", "k8s.io/api/core/v1.ResourceRequirements"},
	}
}
